plugins {
  id 'com.android.library'
  id 'com.github.johnrengelman.shadow'
}

android {
  sourceSets {
    main {
      java {
        exclude 'ioio/smallbasic/pc/**'
      }
    }
  }

  namespace 'net.sourceforge.smallbasic.ioio'
  compileSdk 34

  defaultConfig {
    minSdk 19
  }

  buildTypes {
    release {
      ndk {
        debugSymbolLevel = 'FULL'
      }
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }

  externalNativeBuild {
    ndkBuild {
      path './Android.mk'
    }
  }
}

dependencies {
  api 'com.github.ytai.ioio:IOIOLibCore:5.07'
  shadow 'com.github.ytai.ioio:IOIOLibCore:5.07'
}

//
// Builds a jar from the dependencies, then merges this with the intermediate
// classes.jar to build a 'fat' jar. The makefile eventually inserts the
// updated classes.jar into the final .aar files
// not really the correct or ideal approach but it works.
//

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

tasks.register('shadowJar', ShadowJar) {
  configurations = [project.configurations.shadow]
  dependsOn assemble
}

tasks.register('mergeJars', ShadowJar) {
  archiveClassifier.set('')
  archiveFileName = 'classes.jar'
  dependsOn 'shadowJar'
  configurations.runtimeClasspath.each { File file ->
    from(zipTree(file.absolutePath))
  }
}

mergeJars {
  from 'build/libs/ioio.jar'
  from 'build/intermediates/aar_main_jar/release/syncReleaseLibJars/classes.jar'
}
